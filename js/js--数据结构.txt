数据结构
一、简洁
  数据结构是计算机存储、组织数据的方式。简单来说就是将一组数据通过一种或者多种特定的方式组成一个集合，这种集合的结构就叫做数据结构。

二、常见的数据结构预览
  1.栈（ Stack ）
  2.队列（Queue）
  3.链表（Linked List）
  4.集合（Set）
  5.哈希表/散列表（Hash Table）
  6.树（Tree）
  7.图（Graph）
  8.字典树（Trie）
  9.堆（Heap）

三、数据结构的详细描述
  1.栈
    Stack线性结构，其特点是后进先出（last in first out）。生活中常见的Stack的例子比如一摞书，你最后放上去的那本你之后会最先拿走；又比如 Ctrl + Z 操作
    Stack一般具备以下方法：
      1）push：将一个元素推入栈顶
      2）pop：移除栈顶元素，并返回被移除的元素
      3）peek：返回栈顶元素
      4）length：返回栈中元素的个数
    js实现：
      class Stack {
        constructor() {
          this.stack = [];
        }
        push(item) {
          this.stack.push(item);
        }
        pop() {
          this.stack.pop();
        }
        peek() {
          return this.stack[this.length() - 1];
        }
        length() {
          return this.stack.length;
        }
      }

  2.队列
    队列是一个线性结构，特点是在某一端添加数据，在另一端删除数据，遵循先进先出的原则。在生活中的例子比如排队上公交，排在第一个的总是最先上车。
    队列一般具有以下常见方法：
      1）enqueue：入列，向队列尾部增加一个元素
      2）dequeue：出列，移除队列头部的一个元素并返回被移除的元素
      3）front：获取队列的第一个元素
      4）isEmpty：判断队列是否为空
      5）size：获取队列中元素的个数
    js实现：
      class Queue {
        constructor() {
          this.collection = [];
        }
        enqueu (element) {
          this.collection.push(element);
        }
        dequeue () {
          return this.collection.shift();
        }
        front () {
          return this.collection[0];
        }
        isEmpty () {
          return this.collection.length === 0;
        }
        size () {
          return this.collection.length;
        }
      }

  3.链表
    链表是一种链式数据结构，链上的每个节点包含两种信息：节点本身的数据和指向下一个节点的指针。
    链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。但是链表失去了数组随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大。
    一个单向链表通常具有以下方法：
      1）size：返回链表中节点的个数
      2）head：返回链表中的头部元素
      3）add：向链表尾部增加一个节点
      4）remove：删除某个节点
      5）indexOf：返回某个节点的index
      6）elementAt：返回某个index处的节点
      7）addAt：在某个index处插入一个节点
      8）removeAt：删除某个index处的节点
    代码表示：
      // 单向链表
      const next = {
        next: null,
        value: 1
      }
      const root = {
        next: next,
        value: 0
      }
    js实现：




参考链接：
1.https://zhuanlan.zhihu.com/p/77702278
2.https://zhuanlan.zhihu.com/p/100727644
3.https://juejin.im/book/5bdc715fe51d454e755f75ef/section/5bdc723a6fb9a049c43d1843